{"version":3,"sources":["componentes/jugadores/Jugadores.jsx","reducers/types.jsx","componentes/titulares/Titulares.jsx","componentes/suplentes/Suplentes.jsx","componentes/EquipoSeleccionados.jsx","data/firebase.js","data/Data.jsx","componentes/Home.jsx","componentes/crud-jugadores/grilla/Grilla.jsx","componentes/crud-jugadores/panelSuperior/PanelSuperior.jsx","componentes/crud-jugadores/GridJugadores.jsx","componentes/crud-jugadores/form/validaRut.jsx","componentes/crud-jugadores/form/validaciones.jsx","componentes/crud-jugadores/form/FormJugadores.jsx","reducers/store.jsx","App.js","serviceWorker.js","index.js"],"names":["connect","state","jugadores","datosGrilla","datos","dispatch","agregarTitular","jugador","type","agregarSuplente","cargarDatosGrilla","datosGrid","to","className","Button","variant","onClick","map","j","key","src","foto","alt","nombre","ButtonToolbar","types","titulares","quitarTitular","id","t","suplentes","eliminarSuplente","s","EquipoSeleccionados","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","find","a","fetch","then","res","json","data","catch","error","message","deleteRecord","database","ref","remove","err","insertRecord","record","fbDb","newKey","push","child","set","updateRecord","update","distpatch","inicializarData","useEffect","on","snapshot","val","i","Home","activePag","cantRegistrosGrilla","pagina","paginar","eliminarRegistro","Pagination","pagButtons","number","Item","active","Math","ceil","configPagination","console","log","r","params","reg","window","confirm","alert","aplicarFiltro","texto","useState","setTexto","filtrar","setFiltrar","filtrarDatos","e","filtro","target","value","placeholder","onChange","onKeyUp","GridJugadores","dv","T","M","S","floor","validaciones","errors","rut","rutCompleto","test","tmp","split","digv","toString","validaRut","rdxInsertarRegistros","rdxActualizarRegistro","rdxEliminarRegistro","useParams","setKey","setRut","setNombre","setFoto","findRecord","setFindRecord","history","useHistory","setErrors","arrErrors","JSON","stringify","actualizar","insertar","buscarRegistro","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","maxLength","grabar","INITIAL_STATE","textoFiltro","selectedRecord","createStore","action","desde","cantReg","arrRegNuevos","v","k","Object","keys","includes","filter","undefined","length","concat","slice","toLowerCase","App","store","exact","path","component","FormJugadores","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.faee5f9d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, ButtonToolbar } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport './jugadores.css';\r\n\r\nfunction Jugadores({jugadores, datosGrilla, agregarTitular, agregarSuplente, cargarDatosGrilla}){    //IMPORTANTE: Los parametros deben estar entre parentesis de llave ya que no son props\r\n    \r\n    return (\r\n        <section>\r\n            <h2>Jugadores</h2>\r\n            <Link to={'/jugadores'} className=\"link-to-admin\">\r\n                <Button variant=\"primary\" className=\"btn-admin\" onClick={() => cargarDatosGrilla(datosGrilla)}>Administrar jugadores</Button>\r\n            </Link>\r\n            <div className=\"h-scroll jugador-hscroll\">\r\n                <div className=\"jugadores-container\">                \r\n                {                \r\n                    jugadores.map(j => (\r\n                        <article className=\"jugador\" key={ j.key }>\r\n                            <img src={ j.foto } alt={ j.nombre }/>\r\n                            <h4>{ j.nombre }</h4>\r\n                            <ButtonToolbar>\r\n                                <Button variant=\"success\" onClick={() => agregarTitular(j) } className=\"btn-titular\">Titular</Button>\r\n                                <Button variant=\"primary\" onClick={() => agregarSuplente(j) } className=\"btn-suplente\">Suplente</Button>\r\n                            </ButtonToolbar>        \r\n                        </article>\r\n                        )\r\n                    )\r\n                }\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    jugadores: state.jugadores,\r\n    datosGrilla: state.datos\r\n});\r\n\r\nconst mapDispatcToProps = (dispatch) =>({    \r\n        agregarTitular(jugador){\r\n            dispatch({\r\n                type: 'AGREGAR_TITULAR',\r\n                jugador\r\n            })\r\n        },\r\n\r\n        agregarSuplente(jugador){\r\n            dispatch({\r\n                type: 'AGREGAR_SUPLENTE',\r\n                jugador\r\n            })\r\n        },\r\n        cargarDatosGrilla(datosGrid){\r\n            dispatch({\r\n                type: 'OBTENER_DATOS_GRILLA',\r\n                datosGrid\r\n            });\r\n        }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatcToProps)(Jugadores);","export const types = {\r\n    INICIALIZAR_DATA: 'INICIALIZAR_DATA',\r\n    AGREGAR_TITULAR: 'AGREGAR_TITULAR',\r\n    ELIMINAR_TITULAR: 'ELIMINAR_TITULAR',\r\n    AGREGAR_SUPLENTE: 'AGREGAR_SUPLENTE',\r\n    ELIMINAR_SUPLENTE: 'ELIMINAR_SUPLENTE',\r\n    OBTENER_DATOS_GRILLA: 'OBTENER_DATOS_GRILLA',\r\n    FILTRAR_GRILLA: 'FILTRAR_GRILLA',\r\n    PAGINAR: 'PAGINAR',\r\n    INSERTAR_REGISTRO: 'INSERTAR_REGISTRO',\r\n    ACTUALIZAR_REGISTRO: 'ACTUALIZAR_REGISTRO',\r\n    ELIMINAR_REGISTRO: 'ELIMINAR_REGISTRO',\r\n    EDITAR_REGISTRO: 'EDITAR_REGISTRO',\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button } from 'react-bootstrap';\r\nimport { types } from '../../reducers/types';\r\nimport './titulares.css';\r\n\r\nconst Titulares = ({titulares, quitarTitular}) =>(\r\n    <section>\r\n        <h2>Titulares</h2>\r\n        <div className=\"h-scroll cancha\" >\r\n                <img id=\"img-cancha\" src='https://firebasestorage.googleapis.com/v0/b/entrenador-62f6b.appspot.com/o/cancha.jpg?alt=media&token=84d142a8-579e-483c-8c6d-a69256121123' alt='cancha-footbol' />\r\n                <div className=\"titulares-controller\">\r\n                {                \r\n                    titulares.map(t => \r\n                        <article className=\"titular\" key={t.key}>\r\n                            <img src={t.foto} alt={t.nombre}/>\r\n                            <h4>{t.nombre}</h4>\r\n                            <Button variant=\"danger\" className=\"btn-eliminar\" onClick={() => quitarTitular(t)}>X</Button>\r\n                        </article>\r\n                    )\r\n                }\r\n                </div>\r\n            </div>\r\n    </section>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n    titulares: state.titulares\r\n})\r\n\r\nconst mapDisPatchToProps = dispatch => ({\r\n    quitarTitular(jugador){\r\n        dispatch({\r\n                type: types.ELIMINAR_TITULAR,\r\n                jugador\r\n        })\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDisPatchToProps) (Titulares);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button } from 'react-bootstrap';\r\nimport { types } from '../../reducers/types';\r\nimport './suplentes.css';\r\n\r\nfunction Suplentes({suplentes, eliminarSuplente}){\r\n    return (\r\n        <section>\r\n            <h2>Suplentes</h2>\r\n            <div className=\"h-scroll suplente-hscroll\">\r\n                <div className=\"suplentes-container\">\r\n                {\r\n                    suplentes.map(s => \r\n                        <article className=\"suplente\" key={s.key}>\r\n                            <img src={s.foto} alt={s.nombre} className=\"\"/>\r\n                            <h4>{s.nombre}</h4>\r\n                            \r\n                                <Button variant=\"danger\" className=\"btn-eliminar\" onClick={() => eliminarSuplente(s) }>X</Button>\r\n                            \r\n                        </article>\r\n                    )\r\n                }\r\n\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    suplentes: state.suplentes\r\n});\r\n\r\nconst mapDistpachToProps = dispatch => ({\r\n    eliminarSuplente(jugador){\r\n        dispatch({\r\n            type: types.ELIMINAR_SUPLENTE,\r\n            jugador\r\n        });\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDistpachToProps) (Suplentes);","import React from 'react';\r\nimport Titulares from './titulares/Titulares';\r\nimport Suplentes from './suplentes/Suplentes';\r\n\r\nconst EquipoSeleccionados = () => (\r\n    <div>\r\n        <Titulares />\r\n        <Suplentes />\r\n    </div>\r\n);\r\n\r\nexport default EquipoSeleccionados;","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBAIDjG3ZivD8zztBeK2VfWN2vUIh7eFIw\",\r\n    authDomain: \"entrenador-62f6b.firebaseapp.com\",\r\n    databaseURL: \"https://entrenador-62f6b.firebaseio.com\",\r\n    projectId: \"entrenador-62f6b\",\r\n    storageBucket: \"entrenador-62f6b.appspot.com\",\r\n    messagingSenderId: \"325429659428\",\r\n    appId: \"1:325429659428:web:77ed6f5b92fbe255f415b1\",\r\n    measurementId: \"G-382BN52HWC\"\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport default firebase;","import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport firebase from './firebase.js';\r\nimport { types } from '../reducers/types';\r\n\r\nfunction Data({inicializarData}){\r\n    \r\n    useEffect(()=>{            \r\n            let fdb = firebase.database().ref('jugadores');             \r\n            fdb.on('value', (snapshot) => {\r\n                let datos = snapshot.val();\r\n                var data = [];\r\n                for(let i in datos){\r\n                    data.push( {key:i, id: datos[i].id, nombre: datos[i].nombre, foto: datos[i].foto})\r\n                }\r\n                inicializarData(data);\r\n            });\r\n        },[inicializarData] //Importante: agregar la función inicializarData o de lo contrario se generará un error de redenderizando\r\n    );\r\n\r\n    \r\n    return (\"\");\r\n}\r\n\r\nexport async function find(id){\r\n    return await fetch(`https://entrenador-62f6b.firebaseio.com/jugadores/${id}.json`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    return {key: id, id: data.id, nombre: data.nombre, foto: data.foto};\r\n                })\r\n                .catch(error => {\r\n                    return error.message;\r\n                });\r\n};\r\n\r\n\r\nexport async function deleteRecord(id){\r\n    return await firebase.database().ref('jugadores/' + id).remove()\r\n                .then(\r\n                    function(){\r\n                        return true;\r\n                    },\r\n                    function(err){\r\n                        return false;\r\n                    }\r\n                );\r\n};\r\n\r\n\r\nexport async function insertRecord(record){\r\n    let fbDb = firebase.database().ref('jugadores');\r\n    let newKey = fbDb.push().key;\r\n    return await fbDb.child(newKey).set({id: record.id, nombre: record.nombre, foto: record.foto})  //No es necesario ingresar el registro manualmente en el store ya que se actualiza automáticamente ya que firebase es una base de datos en tiempo real poor lo cual notifica al programa del cambio\r\n        .then(res => {\r\n            return true;\r\n        })\r\n        .catch(error => {\r\n            return false;\r\n        });\r\n    \r\n    //return await fbDb.child(newKey).set({id: record.id, nombre: record.nombre, foto: record.foto},   //No es necesario ingresar el registro manualmente en el store ya que se actualiza automáticamente ya que firebase es una base de datos en tiempo real poor lo cual notifica al programa del cambio\r\n    //    function(error){\r\n    //        return error === null;  //Sólo en caso de error la variable error serán diferente a null\r\n    //    }\r\n    //);\r\n}\r\n\r\nexport async function updateRecord(record){\r\n    let fbDb = firebase.database().ref('jugadores/' + record.key); //Para que la promesa no debuelva un undefined se debe seleccionar el egistro y luego línea aparte y con la referencia al registro, efectuar el update\r\n    return await fbDb.update({id: record.id, nombre: record.nombre, foto: record.foto})  //Actualiza el registro en firebase   \r\n    //A diferencia de la instrucción set, la instrucción update se debe trabajar con la construcción .then .catch de lo contrario debuelve un undefined\r\n    .then(res => {\r\n            return true\r\n        }\r\n    )\r\n    .catch(error => {\r\n        return false\r\n    });\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({ })\r\n\r\n\r\nconst mapDispatchToProps = distpatch => ({    \r\n    inicializarData(jugadores){\r\n        distpatch({\r\n            type: types.INICIALIZAR_DATA,\r\n            jugadores\r\n        })\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Data)\r\n","import React from 'react';\r\nimport Jugadores from './jugadores/Jugadores';\r\nimport EquipoSeleccionado from './EquipoSeleccionados';\r\n//import '/bootstrap/dist/css/bootstrap.min.css';\r\nimport Data from '../data/Data';\r\n\r\n\r\n\r\nexport default function Home() {\r\n  return (\r\n      <>\r\n          <Data />\r\n          <h1>FootManager</h1>\r\n          <Jugadores />\r\n          <EquipoSeleccionado />\r\n      </>\r\n    \r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button, Pagination } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { deleteRecord } from '../../../data/Data';\r\nimport { types } from '../../../reducers/types';\r\nimport './grilla.css';\r\n\r\nfunction Grilla({datosGrid, activePag, paginar, cantRegistrosGrilla, eliminarRegistro, cargarDatosGrilla}){   \r\n  \r\n  const configPagination = () => {\r\n    var pagButtons = [];\r\n      for (let number = 1; number <= Math.ceil(cantRegistrosGrilla / 5); number++) {        //Math.ceil() retorna el número entero superior mas proximo a diferencia de Math.round que redondea al numero entero mmás proximo ya sea superior o inferior\r\n        pagButtons.push(\r\n          <Pagination.Item key={number} active={number === activePag} onClick={() => paginar(number) }>\r\n            {number}\r\n          </Pagination.Item>,\r\n        );\r\n    };\r\n    return pagButtons;\r\n  }\r\n\r\n  const eliminar = key =>{\r\n    if(window.confirm(\"¿Desea eliminar el registro?\")){\r\n      if(deleteRecord(key)) //Se efectúa la petición de eliminar el registro en firebase\r\n      {\r\n        eliminarRegistro(key);  //Elimina el registros desde el store de redux\r\n        cargarDatosGrilla();  //Actualiza el contenido del array que contiene los datos a mostrar en la grilla\r\n        alert(\"El registro ha sido eliminado\");\r\n      }else{\r\n        alert(\"Ocurrio un error al intentar eliminar el registro\");\r\n      }\r\n      \r\n    }\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <br/>\r\n        <div>\r\n          <Pagination className=\"pagination-buttons\">{configPagination()}</Pagination>\r\n          <br />\r\n        </div>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Rut</th>\r\n              <th>Nombre</th>\r\n              <th>Foto</th>\r\n              <th>Acción</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {console.log(datosGrid)}\r\n            {\r\n              datosGrid.map(r => \r\n                <tr key={ r.key }>\r\n                  <td className=\"col-id\">{ r.id }</td>\r\n                  <td className=\"col-nombre\">{ r.nombre }</td>\r\n                  <td className=\"col-foto\">\r\n                    <img src={ r.foto } alt={ r.id }/>\r\n                  </td>\r\n                  <td className=\"col-accion\">\r\n                    <Link to={\"/jugadores/\"+ r.key } params={{ reg: r }}>\r\n                      <Button variant=\"success\" className=\"edit-button\">Editar</Button>\r\n                    </Link>\r\n                    <Button variant=\"danger\" className=\"delete-button\" onClick={() => eliminar(r.key)}>Eliminar</Button>\r\n                  </td>\r\n                </tr>              \r\n              )\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  datosGrid: state.datosGrid,\r\n  activePag: state.activePag,\r\n  cantRegistrosGrilla: state.cantRegistrosGrilla\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  cargarDatosGrilla(){\r\n    dispatch({\r\n      type: types.OBTENER_DATOS_GRILLA,\r\n      pagina: 1\r\n    })\r\n  },\r\n  paginar(pagina){    \r\n    dispatch({\r\n      type: types.PAGINAR,\r\n      pagina\r\n    })\r\n  },\r\n  eliminarRegistro(key){\r\n    dispatch({\r\n      type: types.ELIMINAR_REGISTRO,\r\n      key\r\n    })\r\n  }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Grilla);","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport './panelSuperior.css';\r\n\r\nexport function PanelSuperior({ aplicarFiltro}){\r\n\r\n    const [texto, setTexto ] = useState('');\r\n    const [ pagina, setPagina ] = useState(1)\r\n    const [ filtrar, setFiltrar ] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        if(filtrar){\r\n            aplicarFiltro(texto,pagina);\r\n            setFiltrar(false);\r\n        }\r\n    },[filtrar, setFiltrar, aplicarFiltro])\r\n\r\n    const filtrarDatos = (e) => {\r\n        const filtro = e.target.value; \r\n        setTexto(filtro);   //set es una función asincrona por lo cual no se asegura de que se actualice inmediatamente la variable texto\r\n        setFiltrar(true);\r\n    }\r\n\r\n    return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <Link to=\"/jugadores/nuevo\">\r\n                        <Button className=\"btn-crud\">Nuevo</Button>\r\n                    </Link>\r\n                    <Link to=\"/\">\r\n                        <Button className=\"btn-crud\">Volver</Button>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"col-md-4\"></div>\r\n                <div className=\"col-md-4\">\r\n                    <input type=\"text\" className=\"form-control col-md-12\" value={texto} placeholder=\"Texto a buscar.\" onChange={e => filtrarDatos(e)} onKeyUp={e => filtrarDatos(e)}/>\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({    \r\n    aplicarFiltro(texto, pagina){\r\n        dispatch({\r\n            type: 'FILTRAR_GRILLA',\r\n            texto,\r\n            pagina\r\n        })\r\n    }\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PanelSuperior);","import React from 'react';\r\nimport Grilla from './grilla/Grilla';\r\nimport PanelSuperior from './panelSuperior/PanelSuperior';\r\nimport './crudJugadores.css'\r\n\r\n\r\nexport default function GridJugadores(){\r\n    return (\r\n        <div className=\"container-crud-jugadores\">\r\n            <h2>Mantenedor de Jugadores</h2>\r\n            <PanelSuperior />\r\n            <Grilla />\r\n        </div>\r\n    );\r\n}","export default function validaRut(rutCompleto) {\r\n    if (!/^[0-9]+[-|‐]{1}[0-9kK]{1}$/.test( rutCompleto ))\r\n        return false;\r\n    var tmp \t= rutCompleto.split('-');\r\n    var digv\t= tmp[1]; \r\n    var rut \t= tmp[0];\r\n    if ( digv === 'K' ) digv = 'k' ;\r\n    return (dv(rut).toString() === digv );\r\n}\r\n\r\nconst dv = (T) => {\r\n    var M=0,S=1;\r\n    for(;T;T=Math.floor(T/10))\r\n        S=(S+T%10*(9-M++%6))%11;\r\n    return S?S-1:'k';\r\n}","import validaRut from './validaRut';\r\n\r\nexport const validaciones = (datos) =>{\r\n    const errors = {};\r\n    if(!datos.rut){\r\n        errors.rut = \"El rut es obligatorio.\";\r\n\r\n    }else if(!validaRut(datos.rut)){\r\n        errors.rut = \"El rut no es valido.\";\r\n    }\r\n\r\n    if(!datos.nombre){\r\n        errors.nombre = \"El nombre es obligatorio.\";\r\n    }\r\n\r\n    if(!datos.foto){\r\n        errors.foto = \"La foto es obligatoria.\";\r\n    }\r\n\r\n    return errors;\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Form, Col, Button, Row } from 'react-bootstrap'\r\nimport { useParams, Link, useHistory } from 'react-router-dom'\r\nimport { find, deleteRecord, insertRecord, updateRecord } from '../../../data/Data';\r\nimport { connect } from 'react-redux';\r\nimport { types } from '../../../reducers/types';\r\nimport { validaciones } from './validaciones';\r\nimport './formJugadores.css';\r\n\r\nfunction FromJugadores({datos, rdxInsertarRegistros, rdxActualizarRegistro, rdxEliminarRegistro, cargarDatosGrilla}){    \r\n    const { id } = useParams();\r\n    const [ key, setKey ] = useState(id === 'nuevo' ? '' : id );   //Recibiendo los parametros por url \r\n    const [ rut, setRut ] = useState('')\r\n    const [ nombre, setNombre ] = useState('');\r\n    const [ foto, setFoto ] = useState('');\r\n    const [ findRecord, setFindRecord  ] = useState(true);\r\n    let history = useHistory();\r\n    const [ errors, setErrors ] = useState({})\r\n\r\n    useEffect(() =>{\r\n        if(findRecord && id !== 'nuevo'){\r\n            setFindRecord(false);\r\n            buscarRegistro();\r\n        }\r\n    },[findRecord, id]);\r\n\r\n\r\n    async function buscarRegistro(){\r\n        var res = await find(id);\r\n        if(typeof(res) !== 'string' ){\r\n            setKey(res.key);\r\n            setRut(res.id);\r\n            setNombre(res.nombre);\r\n            setFoto(res.foto);\r\n        }else{\r\n            alert(res);\r\n        }\r\n    }\r\n\r\n    async function grabar(e){  \r\n        const arrErrors = await validaciones({rut: rut, nombre: nombre, foto: foto});\r\n        setErrors(arrErrors);\r\n        if( JSON.stringify(arrErrors) === \"{}\"){\r\n            if(window.confirm(\"¿Desea grabar el registro?\")){\r\n                (id !== 'nuevo' ? actualizar() : insertar());\r\n            }\r\n        }else{\r\n            alert(\"Datos no válidos\");\r\n        }\r\n    }\r\n    \r\n    async function insertar(){\r\n        if(await insertRecord({id: rut, nombre: nombre, foto: foto})){\r\n            cargarDatosGrilla();    //Actualiza el array con los datos a mostrar en la grilla\r\n            alert(\"El registro ha sido ingresado.\");            \r\n            history.push(\"/jugadores\"); //Requiere importar \"useHistory\" desde \"react-router-dom\" y asignarlo a una variable al principio de la función\r\n        }else{\r\n            alert(\"Ocurrio un error al intentar ingresar el registro.\");\r\n        }\r\n    }\r\n    \r\n    async function actualizar(){\r\n        if(await updateRecord({key: key, id: rut, nombre: nombre, foto: foto})){\r\n            rdxActualizarRegistro({key: key, id: rut, nombre: nombre, foto: foto}); //Actualiza el registro en el store de redux\r\n            cargarDatosGrilla();    //Actualiza la matriz con los datos a mostrar en la grilla\r\n            alert(\"El registro ha sido actualizado\");\r\n            history.push(\"/jugadores\")  //Requiere importar \"useHitory\" desde \"react-router-dom\" y asignarlo a una variable al principio de la función\r\n        }else{\r\n            alert(\"Ocurrio un error al intentar actualizar el registro.\")\r\n        }\r\n    }\r\n\r\n\r\n        \r\n    function eliminar(){\r\n        if(window.confirm(\"¿Desea eliminar el registro?\")){\r\n            if(deleteRecord(id)){\r\n                rdxEliminarRegistro(id);    //Elimina el registro desde el store de redux\r\n                cargarDatosGrilla();    //Actualiza el array que contiene los datos a mostrar en la grilla\r\n                alert(\"El registro ha sido eliminado\");\r\n                history.push(\"/jugadores\");    //Requiere importar \"useHitory\" desde \"react-router-dom\" y asignarlo a una variable al principio de la función\r\n            }else{\r\n                alert(\"Ocurrió un error al intentar eliminar el registro. \");\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <div className=\"container-crud-jugadores\">\r\n            <h2>Mantenedor de Jugadores</h2>\r\n            <Form>\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                    <Form.Label column sm={2}>\r\n                    Rut:\r\n                    </Form.Label>\r\n                    <Col sm={5}>\r\n                    <Form.Control \r\n                        type=\"text\" \r\n                        placeholder=\"Ej. 12345678-9\" \r\n                        value={rut} \r\n                        onChange={e =>setRut(e.target.value)} \r\n                        maxLength=\"11\" \r\n                        className=\"input-rut\" \r\n                    />\r\n                    {errors.rut && <span className=\"error-span\"> {errors.rut} </span>}\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                    <Form.Label column sm={2}>\r\n                    Nombre:\r\n                    </Form.Label>\r\n                    <Col sm={5}>\r\n                        <Form.Control \r\n                            type=\"text\" \r\n                            placeholder=\"Nombre\" \r\n                            value={nombre} \r\n                            onChange={e => setNombre(e.target.value)} \r\n                            maxLength=\"35\"\r\n                        />\r\n                        {errors.nombre && <span className=\"error-span\"> {errors.nombre} </span>}\r\n                    </Col>\r\n                    \r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalPassword\">\r\n                    <Form.Label column sm={2}>\r\n                    Foto\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                        <Form.Control \r\n                            type=\"text\" \r\n                            placeholder=\"Foto\" \r\n                            value={foto} \r\n                            onChange={e => setFoto(e.target.value)}\r\n                        />\r\n                        {errors.foto && <span className=\"error-span\"> {errors.foto} </span>}\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} className=\"button-group\">\r\n                    \r\n                    <Button type=\"button\" variant=\"info\" className=\"btnGrabar\" onClick={() =>grabar()}>Grabar</Button>\r\n                    \r\n                    <Button type=\"button\" variant=\"danger\" className=\"btnEliminar\" onClick={() => eliminar() }>Eliminar</Button>\r\n                    \r\n                    <Link to=\"/jugadores\">\r\n                        <Button type=\"button\" className=\"btnVolver\" onClick={() => cargarDatosGrilla() }> Volver</Button>\r\n                    </Link>\r\n                    \r\n                </Form.Group>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapsStateToProps = (state) => ({\r\n    datos: state.datos\r\n});\r\n\r\nconst mapsDispatchToProps = (dispatch) => ({\r\n    rdxInsertarRegistros(jugador){\r\n        dispatch({\r\n            type: types.INSERTAR_REGISTRO,\r\n            jugador\r\n        })\r\n    },\r\n    rdxActualizarRegistro(jugador){\r\n        dispatch({\r\n            type: types.ACTUALIZAR_REGISTRO,\r\n            jugador\r\n        })\r\n    },\r\n    rdxEliminarRegistro(key){\r\n        dispatch({\r\n            type: types.ELIMINAR_REGISTRO,\r\n            key\r\n        })\r\n    },\r\n    cargarDatosGrilla(jugadores){\r\n        dispatch({\r\n            type: types.OBTENER_DATOS_GRILLA,\r\n            jugadores\r\n        })\r\n    }\r\n})\r\n\r\nexport default  connect(mapsStateToProps, mapsDispatchToProps)(FromJugadores);","import { createStore } from 'redux';\r\nimport { types } from './types';\r\n\r\nconst defaultRecord = {key: null, id: '', nombre: '', foto:'' };\r\n\r\nconst INITIAL_STATE = {\r\n    jugadores: [], \r\n    titulares: [],\r\n    suplentes: [],\r\n    datos: [],\r\n    datosGrid: [],\r\n    activePag: 1,\r\n    textoFiltro: '',\r\n    cantRegistrosGrilla: 0,\r\n    selectedRecord: defaultRecord,\r\n}\r\n\r\nconst reducerEntrenador = (state  = INITIAL_STATE, action) => {\r\n    let desde = 1;\r\n    let data = [];\r\n    let cantReg = 0;\r\n\r\n    switch(action.type){\r\n        case types.INICIALIZAR_DATA:\r\n\r\n            var arrRegNuevos = action.jugadores.map( (v,k) => {if(!Object.keys(state.datos).includes(k.toString())){ return v } }).filter(i => i !== undefined) //Obtiene los nuevos registros y los ingresa a la matris de datos siempre y cuando en registro no s encuentre ingresado previamente (Evitamos registros duplicados)\r\n            cantReg = state.jugadores.length + arrRegNuevos.length;\r\n            console.log(arrRegNuevos);\r\n            \r\n            return {\r\n                ...state,\r\n                jugadores: state.jugadores.concat(arrRegNuevos),  //Se agregaran al store sólo los elementos que lleguen por el action y que no se encuentren en el store, para ello se realizaron los siguientes filtros\r\n                datos: state.datos.concat(arrRegNuevos),\r\n                cantRegistrosGrilla: cantReg\r\n            }\r\n\r\n        case types.AGREGAR_TITULAR:\r\n            return {\r\n                ...state,\r\n                jugadores: state.jugadores.filter(j => j.key !== action.jugador.key),\r\n                titulares: state.titulares.concat(action.jugador)\r\n            }\r\n\r\n        case types.ELIMINAR_TITULAR:\r\n            return {\r\n                ...state,\r\n                titulares: state.titulares.filter(t => t.key !== action.jugador.key),\r\n                jugadores: state.jugadores.concat(action.jugador)\r\n            }\r\n\r\n        case types.AGREGAR_SUPLENTE:\r\n            return {\r\n                ...state,\r\n                suplentes: state.suplentes.concat(action.jugador),\r\n                jugadores: state.jugadores.filter(j => j.key !== action.jugador.key)\r\n            }\r\n\r\n        case types.ELIMINAR_SUPLENTE:\r\n            return {\r\n                ...state,\r\n                suplentes: state.suplentes.filter(s => s.key !== action.jugador.key),\r\n                jugadores: state.jugadores.concat(action.jugador)\r\n            }\r\n\r\n        case types.OBTENER_DATOS_GRILLA:\r\n            desde = state.activePag * 5 -5;\r\n            //cantReg = state.datos.length;\r\n            return {\r\n                ...state,\r\n                datosGrid: state.datos.slice(desde, desde + 5)\r\n                //cantRegistrosGrilla: cantReg\r\n            }\r\n\r\n        case types.FILTRAR_GRILLA:\r\n            desde = (action.pagina * 5 - 5)\r\n            data = state.datos.filter(j => j.nombre.toLowerCase().includes(action.texto.toLowerCase()) || j.id.toLowerCase().includes(action.texto.toLowerCase()));            \r\n            return {\r\n                ...state,                \r\n                datosGrid: data.slice(desde, desde + 5),\r\n                cantRegistrosGrilla: data.length,\r\n                textoFiltro: action.texto\r\n            }\r\n\r\n        case types.PAGINAR:\r\n            desde = (action.pagina * 5 - 5);\r\n            \r\n            if(state.textoFiltro !== \"\"){\r\n                data = state.datos.filter(j => j.nombre.toLowerCase().includes(state.textoFiltro.toLowerCase()) || j.id.toLowerCase().includes(action.texto.toLowerCase()));\r\n            }else{\r\n                data = state.datos;\r\n            }\r\n            return {\r\n                ...state,\r\n                datosGrid: data.slice(desde, (desde + 5)),\r\n                activePag: action.pagina\r\n            }\r\n            \r\n        case types.EDITAR_REGISTRO: //Selecciona desde sl store el registro a ser editado\r\n            return {\r\n                ...state,\r\n                selectedRecord: state.data.filter( j => j.key === action.key )\r\n            }\r\n        case types.INSERTAR_REGISTRO:   //Ingresa un nuevo registro en el store\r\n            console.log('NUEVO...', action.jugador);\r\n            return {\r\n                ...state,\r\n                datos: state.datos.concat(action.jugador)\r\n            }\r\n        case types.ACTUALIZAR_REGISTRO: //Actualiza el registros en el store\r\n            return {\r\n                ...state,\r\n                datos: state.datos.map(j=> j.key === action.jugador.key ? action.jugador  : j)                \r\n            }\r\n\r\n        case types.ELIMINAR_REGISTRO:   //Elimina un registro del store\r\n            desde = (action.pagina * 5 - 5);     \r\n            if(state.textoFiltro !== \"\"){\r\n                data = state.datos.filter(j => j.nombre.toLowerCase().includes(state.textoFiltro.toLowerCase()) || j.id.toLowerCase().includes(action.texto.toLowerCase()));\r\n            }else{\r\n                data = state.datos;\r\n            }\r\n            return {\r\n                ...state,\r\n                datos: data.filter(j => j.key !== action.key),\r\n                datosGrid: data.slice(desde, (desde + 5)),\r\n                jugadores: state.jugadores.filter( j => j.key !== action.key)\r\n            }\r\n        default:\r\n            return state;\r\n        }\r\n};\r\n\r\n\r\nexport default createStore(reducerEntrenador);","import React from 'react';\r\nimport './App.css';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './componentes/Home';\r\nimport GridJugadores from './componentes/crud-jugadores/GridJugadores';\r\nimport FormJugadores from './componentes/crud-jugadores/form/FormJugadores'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';  //Debe ir en éste archivo (App.js)\r\n\r\n//Redux\r\nimport { Provider } from 'react-redux';\r\nimport store from './reducers/store';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n        <Provider store={store}>\r\n          <Switch>\r\n            <Route exact path='/' component={Home} />\r\n            <Route exact path='/jugadores' component={GridJugadores} />\r\n            <Route exact path='/jugadores/:id' component={FormJugadores} />\r\n          </Switch>\r\n        </Provider>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n            <BrowserRouter>\r\n            <App />\r\n            </BrowserRouter>, \r\n            document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}